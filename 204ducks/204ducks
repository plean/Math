#!/usr/bin/env python3
from sys import argv
from math import exp

_MAX = 10
_INTERVAL_T = 100

proba = lambda a, t : a * exp(-t) + (4 - 3 * a) * exp(-2 * t) + (2 * a - 4) * exp(-4 * t)
# proba = lambda a, t : exp(-4 * t) * (exp(t) - 1) * (a * exp(2 * t) + (4 - 2 * a) * (exp(t) + 1))
# e ^ (-4t) * (e^t - 1) * (a * e^(2t) + (4 - 2a) * (e^t + 1))

def usage():
    print("USAGE\n"
          "\t%s a\n\n"
          "DESCRIPTION\n"
          "\ta\tconstant" % argv[0])
    pass


def probb(a, p):
    res = 0
    for t in range(_MAX * _INTERVAL_T):
        res += proba(a, t / _INTERVAL_T)
        if res >= p:
            return t / _INTERVAL_T
    raise ValueError


def perba(a, t):
    return sum(proba(a, i / _INTERVAL_T) for i in range(t * _INTERVAL_T))


def ducks(a):
    if not 0 <= a <= 2.5:
        raise ValueError
    p = 0
    r = 0
    t = 0
    while p < 99.9999:
        p += proba(a, t) / 10
        r += (proba(a, t) / 10) * t
        t += 0.001
    r /= 99.9999
    r += 1./60
    print("mean return time: %dm %02ds" % divmod(r * 60, 60))
    d = 0
    while t > 0:
        d += ((t - r) ** 2) * (proba(a, t) / 10)
        t -= 0.001
    d /= 99.9999
    d = d ** 0.5
    print("standard deviation: %.3f" % d)
    print("time after which 50%% of the ducks are back: %dm %02ds" % divmod(probb(a, 50) * 60, 60))
    print("time after which 99%% of the ducks are back: %dm %02ds" % divmod(probb(a, 99) * 60, 60))
    print("percentage of ducks back after 1 minute: %.1f%%" % (perba(a, 1) - 0.2))
    print("percentage of ducks back after 2 minutes: %.1f%%" % perba(a, 2))
    pass


def main():
    if '-h' in argv:
        usage()
    elif len(argv) == 2:
        try:
            ducks(float(argv[1]))
        except ValueError as e:
            print(e)
            usage()
            exit(84)
    else:
        usage()
        exit(84)
    pass


if __name__ == '__main__':
    main()
    pass
