#!/usr/bin/env python3

from sys import argv
from math import sqrt

def usage(e=""):
    print(e,
          "USAGE\n"
          "\t%s pSize sSize p\n"
          "DESCRIPTION\n"
          "\tppSize\tsize of the population\n"
          "\tsSize\tsize of the sample (supposed to be representative)\n"
          "\tp\tpercentage of voting intentions for a specic candidate" % argv[0],
          sep='\n' if e != "" else '')
    pass


def poll(pps, ss, p):
    if pps < 0:
        raise ValueError("Negative pSize")
    pp = p / 100
    var = (pp * (1 - pp) / ss) * ((pps - ss) / (pps - 1))
    c95 = 196 * sqrt(var)
    c99 = 258 * sqrt(var)
    itr95 = [max(p - c95, 0), min(p + c95, 100)]
    itr99 = [max(p - c99, 0), min(p + c99, 100)]
    print("population size:\t%d" % pps,
          "sample size:\t\t%d" % ss,
          "voting intentions:\t%s%%" % str(p).rstrip('.0'),
          "variance:\t\t%.6f" % var,
          "95%% confidence interval:\t[%s]" % " ; ".join(map(lambda x: "%.2f%%" % x, itr95)),
          "99%% confidence interval:\t[%s]" % " ; ".join(map(lambda x: "%.2f%%" % x, itr99)),
          sep='\n')
    pass


def main():
    if len(argv) != 4:
        raise ValueError("Not enough arguments")
    elif '-h' in argv:
        usage()
        exit(0)
    poll(int(argv[1]), int(argv[2]), float(argv[3]))
    pass


if __name__ == '__main__':
    try:
        main()
    except ValueError as e:
        usage(e)
        exit(84)
    pass
