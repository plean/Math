#!/usr/bin/env python3
from sys import argv
from math import factorial, exp
from time import time

C = lambda n, k: (factorial(n) // (factorial(k) * factorial(n - k)))
poisson = lambda c, k : ((exp(-c) * c ** k) / factorial(k))
binomial = lambda i, n, p : (C(n, i) * (p ** i) * ((1 - p) ** (n - i)))


def usage():
    print("USAGE\n"
          "\t%s [n k | d]\n"
          "DESCRIPTION\n"
          "\tn\tn value for the computation of nk\n"
          "\tk\tk value for the computation of nk\n"
          "\td\taverage duration of calls (in seconds)" % argv[0])


def computation(n, k):
    if not 0 <= k <= n:
        raise ValueError
    print("%d-combination of a %d set:" % (k, n))
    print("%d" % (C(n, k)))


def distribution(d):
    if d < 0:
        raise ValueError
    n = 3500
    p = d / (8 * 60 * 60)
    c = p * n
    ctime = time()
    print("Binomial distribution:")
    for i in range(51):
        print("%d->%.3f" % (i, binomial(i, n, p)), end='\t' if (i + 1) % 6 and i != 50 else '\n')
    print("overload: %.1f%%" % (sum(binomial(i, n, p) for i in range(26, 51)) * 100))
    print("computation time: %.2f ms\n" % ((time() - ctime) * 1000))
    ctime = time()
    print("Poisson distribution:")
    for i in range(51):
        print("%d->%.3f" % (i, poisson(c, i)), end='\t' if (i + 1) % 6 and i != 50 else '\n')
    print("overload: %.1f%%" % (sum(poisson(c, i) for i in range(26, 51)) * 100))
    print("computation time: %.2f ms" % ((time() - ctime) * 1000))


def main():
    if '-h' in argv:
        usage()
    elif len(argv) == 2:
        try:
            distribution(int(argv[1]))
        except ValueError as e:
            usage()
            exit(84)
    elif len(argv) == 3:
        try:
            computation(int(argv[1]), int(argv[2]))
        except ValueError as e:
            usage()
            exit(84)
    else:
        usage()
        exit(84)


if __name__ == '__main__':
    main()
